package com.example.userservice.repository;

import static org.assertj.core.api.Assertions.*;

import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.TestPropertySource;

import com.example.userservice.entity.User;

@DataJpaTest
@ActiveProfiles("test")
@TestPropertySource(locations = "classpath:application-test.yml")
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
class UserRepositoryTest {
    @Autowired
    private UserRepository userRepository;

    private User testUser;

    @BeforeEach
    void setUp() {
        // テストデータのセットアップ
        testUser = User.builder()
            .username("testUser")
            .email("test@example.com")
            .password("hashedPassword")
            .build();
    }

    @Test
    void saveUser_Success() {
        // ユーザーの保存をテスト
        User savedUser = userRepository.save(testUser);

        // 保存されたユーザーの検証
        assertThat(savedUser.getId()).isNotNull();
        assertThat(savedUser.getUsername()).isEqualTo(testUser.getUsername());
        assertThat(savedUser.getEmail()).isEqualTo(testUser.getEmail());
        assertThat(savedUser.getPassword()).isEqualTo(testUser.getPassword());
    }

    @Test
    void findByUsername_Success() {
        // テストデータを保存
        userRepository.save(testUser);

        // ユーザー名による検索をテスト
        Optional<User> foundUser = userRepository.findByUsername(testUser.getUsername());
        
        // 検索結果の検証
        assertThat(foundUser).isPresent();
        assertThat(foundUser.get().getUsername()).isEqualTo(testUser.getUsername());
        assertThat(foundUser.get().getEmail()).isEqualTo(testUser.getEmail());
    }

    @Test
    void findByUsername_ReturnEmpty_WhenUserNotFound() {
        // 存在しないユーザー名での検索をテスト
        Optional<User> foundUser = userRepository.findByUsername("nonexistent");
        
        // 結果が空であることを検証
        assertThat(foundUser).isEmpty();
    }

    @Test
    void existsByUsername_ReturnTrue_WhenExists() {
        // テストデータを保存
        userRepository.save(testUser);

        // ユーザー名の存在チェックをテスト
        boolean exists = userRepository.existsByUsername(testUser.getUsername());
        
        // 結果の検証
        assertThat(exists).isTrue();
    }

    @Test
    void existsByUsername_ReturnFalse_WhenNotExists() {
        // 存在しないユーザー名でのチェックをテスト
        boolean exists = userRepository.existsByUsername("nonexistent");
        
        // 結果の検証
        assertThat(exists).isFalse();
    }

    @Test
    void existsByEmail_ReturnTrue_WhenExists() {
        // テストデータを保存
        userRepository.save(testUser);

        // メールアドレスの存在チェックをテスト
        boolean exists = userRepository.existsByEmail(testUser.getEmail());
        
        // 結果の検証
        assertThat(exists).isTrue();
    }

    @Test
    void deleteUser_Success() {
        // テストデータを保存
        User savedUser = userRepository.save(testUser);

        // ユーザーの削除をテスト
        userRepository.deleteById(savedUser.getId());

        // 削除の確認
        Optional<User> deletedUser = userRepository.findById(savedUser.getId());
        assertThat(deletedUser).isEmpty();
    }
}