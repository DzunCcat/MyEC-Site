package com.example.userservice.config;

import static org.springframework.security.config.Customizer.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

import com.example.userservice.exception.validation.ValidationException;

@Configuration
@EnableWebSecurity
public class SecurityConfig {
    private static final Logger log = LoggerFactory.getLogger(SecurityConfig.class);

    @Bean
    PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        return http
            .csrf(AbstractHttpConfigurer::disable)
            .authorizeHttpRequests(auth -> auth
            	    .requestMatchers("/api/users/admin/**").hasRole("ADMIN")
            	    .requestMatchers(HttpMethod.DELETE, "/api/users/**").hasRole("ADMIN")
            	    .requestMatchers(HttpMethod.POST, "/api/users").permitAll()
            	    .requestMatchers("/api/users/**").authenticated()
            	    .anyRequest().authenticated()
            	)
            .exceptionHandling(exceptionHandling -> exceptionHandling
                .authenticationEntryPoint((request, response, authException) -> {
                    log.warn("Unauthorized access attempt: {}", request.getRequestURI());
                    throw new ValidationException("認証が必要です");
                })
                .accessDeniedHandler((request, response, accessDeniedException) -> {
                    log.warn("Access denied to resource: {}", request.getRequestURI());
                    throw new ValidationException("アクセスが拒否されました");
                })
            )
            .httpBasic(withDefaults())
            .build();
    }
}