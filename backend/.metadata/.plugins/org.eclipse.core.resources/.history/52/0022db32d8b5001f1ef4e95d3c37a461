package com.example.apigateway.filter;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.core.Ordered;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;

import reactor.core.publisher.Mono;

@Component
public class ValidationFilter implements GatewayFilter, Ordered {
    private static final Logger log = LoggerFactory.getLogger(ValidationGatewayFilterFactory.class);

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
        ServerHttpRequest request = exchange.getRequest();
        
        // Content-Type検証
        if (!isValidContentType(request)) {
            log.error("Invalid content type");
            return onError(exchange, "Invalid content type", HttpStatus.BAD_REQUEST);
        }

        // リクエストサイズ検証
        if (!isValidRequestSize(request)) {
            log.error("Request size exceeds limit");
            return onError(exchange, "Request too large", HttpStatus.PAYLOAD_TOO_LARGE);
        }

        return chain.filter(exchange);
    }

    @Override
    public int getOrder() {
        return Ordered.HIGHEST_PRECEDENCE + 1;
    }

    private boolean isValidContentType(ServerHttpRequest request) {
        String contentType = request.getHeaders().getFirst(HttpHeaders.CONTENT_TYPE);
        return contentType != null && 
               (contentType.contains(MediaType.APPLICATION_JSON_VALUE) || 
                contentType.contains(MediaType.MULTIPART_FORM_DATA_VALUE));
    }

    private boolean isValidRequestSize(ServerHttpRequest request) {
        // リクエストサイズの検証ロジック
        return true;
    }

    private Mono<Void> onError(ServerWebExchange exchange, String message, HttpStatus status) {
        exchange.getResponse().setStatusCode(status);
        return exchange.getResponse().setComplete();
    }
}