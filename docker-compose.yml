version: '3.8'

services:
  eureka-server:
    build:
      context: ./backend/eureka-server
      dockerfile: Dockerfile.dev
    ports:
      - "8761:8761"
    networks:
      - my-network
    healthcheck:
      test: ["CMD", "curl", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 120s

  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile.dev
    ports:
      - "8080:8080"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
    depends_on:
      eureka-server:
        condition: service_healthy
    networks:
      - my-network

  user-service:
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile.dev
    ports:
      - "8081:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/ecsite
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=password
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_FLYWAY_ENABLED=true
      - SPRING_FLYWAY_BASELINE_ON_MIGRATE=true
    depends_on:
      eureka-server:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - my-network

  product-service:
    build:
      context: ./backend/product-service
      dockerfile: Dockerfile.dev
    ports:
      - "8082:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/ecsite
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=password
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_FLYWAY_ENABLED=true
      - SPRING_FLYWAY_BASELINE_ON_MIGRATE=true
    depends_on:
      eureka-server:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - my-network

  order-service:
    build:
      context: ./backend/order-service
      dockerfile: Dockerfile.dev
    ports:
      - "8083:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/ecsite
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=password
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_FLYWAY_ENABLED=true
      - SPRING_FLYWAY_BASELINE_ON_MIGRATE=true
    depends_on:
      eureka-server:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - my-network

  cart-service:
    build:
      context: ./backend/cart-service
      dockerfile: Dockerfile.dev
    ports:
      - "8084:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/ecsite
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=password
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_FLYWAY_ENABLED=true
      - SPRING_FLYWAY_BASELINE_ON_MIGRATE=true
    depends_on:
      eureka-server:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - my-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    networks:
      - my-network

  db:
      image: postgres:15.2
      environment:
        - POSTGRES_DB=ecsite
        - POSTGRES_USER=admin
        - POSTGRES_PASSWORD=password
        # 以下を追加
        - POSTGRES_HOST_AUTH_METHOD=trust
      ports:
        - "5432:5432"
      volumes:
        - db-data:/var/lib/postgresql/data
      networks:
        - my-network
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U admin -d ecsite"]
        interval: 10s
        timeout: 5s
        retries: 5
      # 以下を追加
      deploy:
        resources:
          limits:
            memory: 512M
          reservations:
            memory: 256M
      restart: always

  pgadmin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:80"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - my-network

volumes:
  db-data:

networks:
  my-network:
    driver: bridge
